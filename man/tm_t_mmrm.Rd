% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_t_mmrm.R
\name{tm_t_mmrm}
\alias{tm_t_mmrm}
\title{Mix model with repeated measurements (\code{MMRM}) Table Teal Module}
\usage{
tm_t_mmrm(
  label,
  dataname,
  endpoint_var,
  id_var,
  arm_var,
  visit_var,
  arm_ref_comp = NULL,
  paramcd,
  formula,
  mode,
  conf_level,
  weights_emmeans,
  cor_struct,
  pre_output = NULL,
  post_output = NULL
)
}
\arguments{
\item{label}{menu item label of the module in the teal app}

\item{dataname}{(\code{character}) analysis data used in teal module, needs to be available in
the list passed to the \code{data} argument of \code{\link[teal]{init}}.
Note that the data is expected to be in vertical form where each subject has
repeated measured at different timepoints. At each visit, there is only one
record for each subject.}

\item{endpoint_var}{\code{\link[teal]{choices_selected}} object with all available choices and preselected option
for numeric variables that can be used as \code{endpoint}}

\item{id_var}{\code{\link[teal]{choices_selected}} object specifying the variable name for subject id.}

\item{arm_var}{\code{\link[teal]{choices_selected}} object with all available choices and preselected option
for variable names that can be used as \code{arm}}

\item{visit_var}{\code{\link[teal]{choices_selected}} object with all available choices and preselected option
for variable names that can be used as visit. Must be factor and consecutive numbers if numeric in \code{dataname}.}

\item{arm_ref_comp}{(\code{\link[teal]{choices_selected}}) optional, if specified it must be a named list with each
element corresponding to an arm variable in \code{ADSL} and the element must
be another list with the elements named \code{ref} and \code{comp} that the
defined the default reference and comparison arms when the arm variable is
changed.}

\item{paramcd}{\code{\link[teal]{choices_selected}} object with all available choices and preselected option for
variable names that can be used as \code{PARAMCD} variable}

\item{formula}{\code{\link[teal]{choices_selected}} object specifying the string type of options for module formula
(regressors only).}

\item{mode}{\code{\link[teal]{choices_selected}} object specifying the algorithm for degree of freedom:
\code{auto}, \code{df.error} or \code{boot-satterthwaite}.}

\item{conf_level}{\code{\link[teal]{choices_selected}} object specifying the confidence level. Greater than 0 and
less than 1.}

\item{weights_emmeans}{\code{\link[teal]{choices_selected}} object specifying the \code{emmeans} weights:
"proportional" or "equal".}

\item{cor_struct}{\code{\link[teal]{choices_selected}} object with \code{NULL} and other possible choices specifying
the name of \code{\link[nlme]{corClasses}}.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\description{
\code{MMRM} as defined in \code{\link[tern]{t_mmrm}} in the
\code{tern} package
}
\details{
This modules expects that the analysis data has the following variables

\tabular{ll}{
 \code{PARAMCD} \tab variable used to filter for endpoint, after
 filtering for \code{paramcd} one observation per patient per time point is expected
}

The arm, subject ID, baseline characteristics variables are taken from the \code{ADSL} data.
}
\examples{
library(random.cdisc.data)

ADSL <- radsl(cached = TRUE)
ADQS <- radqs(cached = TRUE) \%>\%
  dplyr::filter(ABLFL != "Y" & ABLFL2 != "Y") \%>\%
  dplyr::mutate(
    AVISIT = as.factor(AVISIT),
    AVISITN = rank(AVISITN) \%>\%
      as.factor() \%>\%
      as.numeric() \%>\%
      as.factor() # making consecutive numeric factor
  )

arm_ref_comp = list(
  ARMCD = list(
    ref = "ARM A",
    comp = c("ARM B", "ARM C")
  )
)

app <- init(
    data = cdisc_data(
      cdisc_dataset("ADSL", ADSL),
      cdisc_dataset("ADQS", ADQS),
      code = "ADSL <- radsl(cached = TRUE)
              ADQS <- radqs(cached = TRUE) \%>\%
                dplyr::filter(ABLFL != 'Y' & ABLFL2 != 'Y') \%>\%
                dplyr::mutate(
                  AVISIT = as.factor(AVISIT),
                  AVISITN = rank(AVISITN) \%>\%
                    as.factor() \%>\%
                    as.numeric() \%>\%
                    as.factor()
                )",
      check = FALSE),
    modules = root_modules(
        tm_t_mmrm(
            label = "MMRM",
            dataname = 'ADQS',
            endpoint_var = choices_selected(c("AVAL", "CHG"), "AVAL"),
            id_var = choices_selected(c("USUBJID", "SUBJID"), "USUBJID"),
            arm_var = choices_selected(c("ARM", "ARMCD"), "ARMCD"),
            visit_var = choices_selected(c("AVISIT", "VISIT", "AVISITN"), "AVISIT"),
            arm_ref_comp = arm_ref_comp,
            paramcd = choices_selected(
              choices = value_choices(ADQS, "PARAMCD", "PARAM"),
              selected = "FKSI-FWB"
            ),
            formula = choices_selected(
              choices = c('BASE + AVISITN + ARMCD + ARMCD*AVISITN + SEX',
                          'BASE + AVISIT + ARMCD + ARMCD*AVISIT + SEX',
                          'BASE + AVISIT + ARM + ARM*AVISIT + SEX'),
              selected = 'BASE + AVISIT + ARMCD + ARMCD*AVISIT + SEX'),
            mode = choices_selected(
              choices = c("auto", "df.error", "boot-satterthwaite"),
              selected = "boot-satterthwaite"),
            conf_level = choices_selected(c("0.95", "0.9", "0.8"), "0.95"),
            weights_emmeans = choices_selected(c("proportional", "equal"), "proportional"),
            cor_struct = choices_selected(c("corSymm", "corAR1"), "corSymm")
        )
    )
)


\dontrun{
shinyApp(app$ui, app$server)
}
}
